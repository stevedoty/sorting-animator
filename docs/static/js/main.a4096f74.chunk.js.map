{"version":3,"sources":["helperFile.jsx","SortingAlgorithms/sortingAlgorithms.js","SortingAnimator/SortingAnimator.jsx","App.js","serviceWorker.js","index.js"],"names":["resetArray","min","max","array","i","push","Math","floor","random","getMergeSortAnimations","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","j","doMerge","SortingAnimator","props","state","this","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newWidth","width","console","log","className","onClick","mergeSort","testSortingAlgorithms","map","value","indx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4096f74.chunk.js","sourcesContent":["//generates random intergers from min to max\nexport const randomIntFromInterval = (min, max) => {\n  //create random number, transform into Int\n  return Math.floor(Math.random() * (max - min + 1) + min )\n}\n\n//generates a new unsorted array\nexport const resetArray = () => {\n  //create a new array\n  const array = [];\n  //iterate\n  for(let i = 0; i < 150; i++ ){\n    //generate new Int for every iteration, add to array\n    array.push( randomIntFromInterval(5, 500) );\n  }\n  return array;\n}\n\n//create a test to compare two arrays\nexport const areArraysEqual = (arrayOne, arrayTwo) => {\n  if (arrayOne.length !== arrayTwo.length)return false;\n  for (let i=0; i<arrayOne.length; i++){\n    if(arrayOne[i] !== arrayTwo[i])return false;\n  }\n  return true;\n}\n","// export const mergeSort = array => {\n//   //special cases\n//   //if (array === 0)return;\n//   if (array.length === 1) return array;\n//   //find middle of array\n//   const middleIndx = Math.floor(array.length/2);\n//   //create a smaller array from original array from index0 to middleIndx\n//   const firstHalf = mergeSort(array.slice(0, middleIndx));\n//   //create a smaller array from original array from middleIndx to end\n//   const secondHalf =  mergeSort(array.slice(middleIndx));\n//   //create new array\n//   const sortedArray = [];\n//   //create index variables\n//   let i=0,\n//     j=0;\n//   //while interating over arrays\n//   while( i < firstHalf.length && j < secondHalf.length){\n//     //if the first value is less than the second value\n//     if(firstHalf[i] < secondHalf[j]){\n//       //push [i] then add to i\n//       sortedArray.push(firstHalf[i++])\n//     }else{\n//       //push [j] then add to j\n//       sortedArray.push(secondHalf[j++])\n//     }\n//   }\n//   while(i < firstHalf.length) sortedArray.push(firstHalf[i++])\n//   while(j < secondHalf.length) sortedArray.push(secondHalf[j++])\n//   return sortedArray;\n// }\n\n\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport './SortingAnimator.css'\nimport {resetArray, areArraysEqual} from '../helperFile.jsx';\nimport {mergeSort, getMergeSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js'\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n\nexport default class SortingAnimator extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      array: [],\n    }\n  }\n\n  componentDidMount(){\n    const array = resetArray();\n    this.setState({array})\n  }\n  //create new resetArray function\n  resetArray(){\n    const array = resetArray();\n    this.setState({array});\n  }\n  //fine tune mergeSort on this end\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newWidth] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.width = `${newWidth}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  //\n  // mergeSort(){\n  //   const animations = sortingAlgorithms.getMergeSortAnimations(this.state.array);\n  //   const newAnimations = [];\n  //   for (const animation of animations) {\n  //     newAnimations.push(animation.comparison);\n  //     newAnimations.push(animation.comparison);\n  //     newAnimations.push(animation.swap);\n  //   }\n  //   for (let i=0; i<newAnimations.length; i++) {\n  //     const arrayBars = document.getElementByClassName('array-bar');\n  //     const [barOneIndx, barTwoIdnx] = newAnimations[i];\n  //     const barOneStyle = arrayBars[barOneIndx].style;\n  //     const barTwoStyle = arrayBars[barTwoIndx].style;\n  //     const isColorChange = i % 3 != 2;\n  //     if (isColorChange) {\n  //       const color = i % 3 === 0 ? 'red' : 'turquoise';\n  //       setTimeout(() => {\n  //         arrayBars[barOneIndx].style.backgroundColor = color;\n  //         arrayBars[barTwoIndx].style.backgroundColor = color;\n  //       }, i * 5);\n  //     } else {\n  //       setTimeout(() => {\n  //         const tempHeight = barOne.height;\n  //         barOneStyle.height = barTwoStyle.height;\n  //         barOneStyle.height = tempHeight;\n  //       }, i * 5);\n  //     }\n  //   }\n  // }\n\n  //large scale testing algorithm with DOM button\n  // testSortingAlgorithms(){\n  //   //generate new array]\n  //   let testArray = resetArray()\n  //   //run sort() * 100\n  //   for (let i=0; i<100; i++){\n  //     //sort the test array\n  //     let sortedArray = mergeSort(testArray);\n  //     //create js sorted array\n  //     const javascriptSortedArray = testArray\n  //       .sort((a, b) => a - b);\n  //     //if sorted array == js sorted array return true; else false\n  //     console.log(areArraysEqual(javascriptSortedArray, sortedArray))\n  //   }\n  // }\n\n  render(){\n    const {array} = this.state;\n    console.log(array.length)\n    return (\n      <div>\n        <nav className=\"nav\">\n          <button className=\"nav-item\" onClick={() => this.resetArray()}>NEW ARRAY</button>\n          <div className=\"vertical-rule nav-item\"></div>\n          <button className=\"nav-item\" onClick={() => this.mergeSort()}>MERGE</button>\n          <button className=\"nav-item\">QUICK</button>\n          <button className=\"nav-item\">HEAP</button>\n          <button className=\"nav-item\">BUBBLE</button>\n          <div className=\"vertical-rule nav-item\"></div>\n          <button className=\"nav-item\" onClick={() => this.testSortingAlgorithms()}>Test</button>\n        </nav>\n        <div className=\"array-container\">\n          {array.map((value, indx) => (\n            <div className =\"array-bar-container\">\n              <div className=\"array-bar\" key={indx} style={{width:`${value}px`}}>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport SortingAnimator from './SortingAnimator/SortingAnimator.jsx'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingAnimator></SortingAnimator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}